**
* A handler is called when the sprite is created,
* and each time the sprite is moved.
*
* Parameters for all handlers:
* r4 points to the sprite
*

*********************************************************************
*
* Plane handler
*
plane_handler:
       inc  @sprite_x(r4)
       rt
*// plane_handler

*********************************************************************
*
* Shadow handler
*
shadow_handler:
       mov  @player_sprite,r5
       mov  @sprite_x(r5),@sprite_x(r4)
       mov  @sprite_y(r5),@sprite_y(r4)
       rt
*// shadow_handler

*********************************************************************
*
* Green bullet handler
*
green_bullet_handler:
       mov  @sprite_x(r4),r0
       mov  @sprite_y(r4),r1
       a    r0,r1
       s    @scroll_pos,r1
       ci   r1,240
       jgt  green_bullet_handler_2
green_bullet_handler_1:
       ai   r0,8
       mov  r0,@sprite_x(r4)
       jmp  green_bullet_handler_3
green_bullet_handler_2:
       clr  @sprite_type(r4)
green_bullet_handler_3:
       rt
*// green_bullet_handler

*********************************************************************
*
* Rocker launch handler
*
rocket_launch_handler:
       .proc
       mov  @sprite_counter(r4),r0
       inc  r0
       mov  r0,@sprite_counter(r4)
       ci   r0,64
       jne  rocket_launch_handler_1
*      Create rocket
       .push r4
       bl   @allocate_sprite
       mov  r4,r5
       .pop r4
       mov  r5,r5
       jeq  rocket_launch_handler_5
       li   r0,sprite_type_green_rocket_1
       mov  r0,@sprite_type(r5)
       bl   @align_sprites
       inct @sprite_x(r5)
       dect @sprite_y(r5)
       seto @sprite_counter(r5)
       jmp  rocket_launch_handler_5
rocket_launch_handler_1:
       ci   r0,128
       jne  rocket_launch_handler_2
       clr  @sprite_type(r4)
       jmp  rocket_launch_handler_5
rocket_launch_handler_2:
       andi r0,>0010
       jne  rocket_launch_handler_3
       li   r0,sprite_type_rocket_launch_1
       jmp  rocket_launch_handler_4
rocket_launch_handler_3:
       li   r0,sprite_type_rocket_launch_2
rocket_launch_handler_4:
       mov  r0,@sprite_type(r4)
rocket_launch_handler_5:
       .endproc
*// rocket_launch_handler

*********************************************************************
*
* Green rocket handler
*
green_rocket_handler:
       inc  @sprite_z(r4)
       mov  @sprite_counter(r4),r0
       inc  r0
       mov  r0,@sprite_counter(r4)
       ci   r0,80
       jne  green_rocket_handler_1
       seto @sprite_counter(r4)
       li   r0,sprite_type_small_explosion
       jmp  green_rocket_handler_3
green_rocket_handler_1:
       andi r0,>0008
       jne  green_rocket_handler_2
       li   r0,sprite_type_green_rocket_1
       jmp  green_rocket_handler_3
green_rocket_handler_2:
       li   r0,sprite_type_green_rocket_2
green_rocket_handler_3:
       mov  r0,@sprite_type(r4)
       rt
*// green_rocket_handler

*********************************************************************
*
* Small explosion handler
*
small_explosion_handler:
       mov  @sprite_counter(r4),r0
       inc  r0
       mov  r0,@sprite_counter(r4)
       ci   r0,16
       jlt  small_explosion_1
       clr  @sprite_type(r4)
small_explosion_1:
       rt
*// small_explosion_handler

*********************************************************************
*
* Shield handler
*
shield_handler:
       mov  @sprite_counter(r4),r0
       jlt  shield_handler_2           ; Reset
       jeq  shield_handler_1           ; Move back
       dec  r0
       mov  r0,@sprite_counter(r4)
       mov  @sprite_y(r4),r0
       ai   r0,32
       mov  r0,@sprite_y(r4)
       jmp  shield_handler_3
shield_handler_1:
       li   r0,128
       s    r0,@sprite_y(r4)
shield_handler_2:
       li   r0,4
       mov  r0,@sprite_counter(r4)
shield_handler_3:
       rt
*// shield_handler

*********************************************************************
*
* Explosion handler
*
explosion_handler:
       mov  @sprite_counter(r4),r0
       inc  r0
       mov  r0,@sprite_counter(r4)
       ci   r0,32
       jl   explosion_handler_1
       seto @sprite_counter(r4)
       li   r0,sprite_type_cinders
       mov  @sprite_y(r4),r1
       ci   r1,170
       jlt  explosion_handler_3
       li   r0,sprite_type_cinders_500
       jmp  explosion_handler_3
explosion_handler_1:
       andi r0,>0008
       jne  explosion_handler_2
       li   r0,sprite_type_explosion_1
       jmp  explosion_handler_3
explosion_handler_2:
       li   r0,sprite_type_explosion_2
explosion_handler_3:
       mov  r0,@sprite_type(r4)
       rt
*// explosion_handler

*********************************************************************
*
* Cinders handler
*
cinders_handler:
       mov  @sprite_counter(r4),r0
       inc  r0
       mov  r0,@sprite_counter(r4)
       ci   r0,64
       jlt  cinders_handler_1
       clr  @sprite_type(r4)
cinders_handler_1:
       rt
*// cinders_handler

*********************************************************************
*
* Hit handler
*
hit_handler:
       mov  @sprite_counter(r4),r0
       inc  r0
       mov  r0,@sprite_counter(r4)
       ci   r0,16
       jne  hit_handler_1
       clr  @sprite_type(r4)
       jmp  hit_handler_2
hit_handler_1:
       ci   r0,8
       jne  hit_handler_2
       li   r0,sprite_type_hit_1
       mov  r0,@sprite_type(r4)
hit_handler_2:
       rt
*// hit_handler

*********************************************************************
*
* Explode hit handler
*
* r4: bullet sprite
* r5: sprite that's hit
*
explode_hit_handler:
       clr  @sprite_type(r4)           ; Remove bullet
       li   r0,sprite_type_explosion_1
       mov  r0,@sprite_type(r5)        ; Change sprite that's hit to explosion
       seto @sprite_counter(r5)
       rt
*// explode_hit_handler

*********************************************************************
*
* Wall hit handler
*
* r4: bullet sprite
* r5: wall that's hit
*
wall_hit_handler:
       li   r0,sprite_type_hit_2
       mov  r0,@sprite_type(r4)        ; Change bullet to hit sprite
       seto @sprite_counter(r4)
       rt
*// wall_hit_handler
