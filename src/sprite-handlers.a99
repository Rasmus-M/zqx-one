**
* A handler is called when the sprite is created,
* and each time the sprite is moved.
*
* Parameters for all handlers:
* r4 points to the sprite
*

*********************************************************************
*
* Plane handler
*
plane_handler:
       mov  @player_died,r0
       jeq  plane_handler_1
       li   r0,sprite_type_player_explosion_center
       mov  r0,@sprite_type(r4)
       seto @sprite_counter(r4)
       jmp  plane_handler_2
plane_handler_1:
       c    @scroll_pos,@scroll_max
       jeq  plane_handler_2
       inc  @sprite_x(r4)
plane_handler_2:
       rt
*// plane_handler

*********************************************************************
*
* Shadow handler
*
shadow_handler:
       mov  @player_died,r0
       jne  shadow_handler_2
       mov  @player_sprite,r5
       mov  @sprite_x(r5),r0
       mov  r0,@sprite_x(r4)
       mov  @sprite_y(r5),@sprite_y(r4)
       c    @sub_level_data,@sub_level_0_data
       jeq  shadow_handler_2
       mov  @walls_ptr,r1
shadow_handler_1:
       mov  *r1+,r2                    ; Get wall x
       jeq  shadow_handler_3           ; Show
       s    r0,r2                      ; Wall x - player x
       ci   r2,16
       jgt  shadow_handler_3           ; Show
       a    *r1+,r2                    ; Add wall height
       ci   r2,-8
       jlt  shadow_handler_1
shadow_handler_2:
*      Hide
       seto  @sprite_z(r4)
       rt
shadow_handler_3:
*      Show
       clr  @sprite_z(r4)
       rt
*// shadow_handler

*********************************************************************
*
* Green bullet handler
*
green_bullet_handler:
       mov  @sprite_x(r4),r0
       mov  @sprite_y(r4),r1
       a    r0,r1
       s    @scroll_pos,r1
       ci   r1,240
       jgt  green_bullet_handler_2
green_bullet_handler_1:
       ai   r0,8
       mov  r0,@sprite_x(r4)
       jmp  green_bullet_handler_3
green_bullet_handler_2:
       clr  @sprite_type(r4)
green_bullet_handler_3:
       rt
*// green_bullet_handler

*********************************************************************
*
* Rocker launch handler
*
rocket_launch_handler:
       .proc
       inc  @sprite_counter(r4)
       mov  @sprite_counter(r4),r0
       ci   r0,64
       jne  rocket_launch_handler_1
*      Create rocket
       .push r4
       bl   @allocate_sprite
       mov  r4,r5
       .pop r4
       mov  r5,r5
       jeq  rocket_launch_handler_5
       li   r0,sprite_type_green_rocket_1
       mov  r0,@sprite_type(r5)
       bl   @align_sprites
       inct @sprite_x(r5)
       dect @sprite_y(r5)
       seto @sprite_counter(r5)
       jmp  rocket_launch_handler_5
rocket_launch_handler_1:
       ci   r0,128
       jne  rocket_launch_handler_2
       clr  @sprite_type(r4)
       jmp  rocket_launch_handler_5
rocket_launch_handler_2:
       andi r0,>0010
       jne  rocket_launch_handler_3
       li   r0,sprite_type_rocket_launch_1
       jmp  rocket_launch_handler_4
rocket_launch_handler_3:
       li   r0,sprite_type_rocket_launch_2
rocket_launch_handler_4:
       mov  r0,@sprite_type(r4)
rocket_launch_handler_5:
       .endproc
*// rocket_launch_handler

*********************************************************************
*
* Green rocket handler
*
green_rocket_handler:
       inc  @sprite_z(r4)
       inc  @sprite_counter(r4)
       mov  @sprite_counter(r4),r0
       ci   r0,80
       jne  green_rocket_handler_1
       seto @sprite_counter(r4)
       li   r0,sprite_type_small_explosion
       jmp  green_rocket_handler_3
green_rocket_handler_1:
       andi r0,>0008
       jne  green_rocket_handler_2
       li   r0,sprite_type_green_rocket_1
       jmp  green_rocket_handler_3
green_rocket_handler_2:
       li   r0,sprite_type_green_rocket_2
green_rocket_handler_3:
       mov  r0,@sprite_type(r4)
       rt
*// green_rocket_handler

*********************************************************************
*
* Small explosion handler
*
small_explosion_handler:
       .proc
       inc  @sprite_counter(r4)
       mov  @sprite_counter(r4),r0
       ci   r0,16
       jlt  small_explosion_1
*      Done
       clr  @sprite_type(r4)
       li   r0,10
       bl   @add_score
small_explosion_1:
       .endproc
*// small_explosion_handler

*********************************************************************
*
* Shield handler
*
shield_handler:
       mov  @sprite_counter(r4),r0
       jlt  shield_handler_2           ; Reset
       jeq  shield_handler_1           ; Move back
       dec  r0
       mov  r0,@sprite_counter(r4)
       mov  @sprite_y(r4),r0
       ai   r0,32
       mov  r0,@sprite_y(r4)
       jmp  shield_handler_3
shield_handler_1:
       li   r0,128
       s    r0,@sprite_y(r4)
shield_handler_2:
       li   r0,4
       mov  r0,@sprite_counter(r4)
shield_handler_3:
       rt
*// shield_handler

*********************************************************************
*
* Explosion handler
*
explosion_handler:
       .proc
       inc  @sprite_counter(r4)
       mov  @sprite_counter(r4),r0
       ci   r0,32
       jl   explosion_handler_1
       seto @sprite_counter(r4)
*      Determine and add score
       bl   @rand
       ci   r0,>e000
       jh   explosion_handler_0
       li   r0,10
       bl   @add_score
       li   r0,sprite_type_debris
       jmp  explosion_handler_3
explosion_handler_0:
       li   r0,50
       bl   @add_score
       li   r0,sprite_type_debris_500
       jmp  explosion_handler_3
*      Set explosion pattern
explosion_handler_1:
       andi r0,>0008
       jne  explosion_handler_2
       li   r0,sprite_type_explosion_1
       jmp  explosion_handler_3
explosion_handler_2:
       li   r0,sprite_type_explosion_2
explosion_handler_3:
       mov  r0,@sprite_type(r4)
       .endproc
*// explosion_handler

*********************************************************************
*
* Debris handler
*
debris_handler:
       inc  @sprite_counter(r4)
       mov  @sprite_counter(r4),r0
       ci   r0,64
       jlt  debris_handler_1
       clr  @sprite_type(r4)
debris_handler_1:
       rt
*// debris_handler

*********************************************************************
*
* Blue gun handler
*
blue_gun_handler:
       .proc
       mov  @sprite_counter(r4),r0
       jlt  blue_gun_handler_0
       dec  @sprite_counter(r4)
       jgt  blue_gun_handler_1
*      Create bullet
       .push r4
       bl   @allocate_sprite
       mov  r4,r5
       .pop r4
       mov  r5,r5
       jeq  blue_gun_handler_1
       li   r0,sprite_type_red_bullet
       mov  r0,@sprite_type(r5)
       bl   @align_sprites
       li   r0,24
       s    r0,@sprite_x(r5)
blue_gun_handler_0:
       bl   @rand
       andi r0,>ff
       mov  r0,@sprite_counter(r4)
blue_gun_handler_1:
       .endproc
*// blue_gun_handler

*********************************************************************
*
* Red bullet handler
*
red_bullet_handler:
       dec  @sprite_x(r4)
       rt
*// red_bullet_handler

*********************************************************************
*
* Green gun handler
*
green_gun_handler:
       .proc
       mov  @sprite_counter(r4),r0
       jlt  green_gun_handler_0
       dec  @sprite_counter(r4)
       jgt  green_gun_handler_1
*      Create bullet
       .push r4
       bl   @allocate_sprite
       mov  r4,r5
       .pop r4
       mov  r5,r5
       jeq  green_gun_handler_1
       li   r0,sprite_type_red_bullet_2
       mov  r0,@sprite_type(r5)
       seto @sprite_counter(r5)
       bl   @align_sprites
       mov  @sprite_type(r4),r0
       ci   r0,sprite_type_green_gun
       jne  green_gun_handler_2
*      Green gun shooting up
       li   r0,24
       s    r0,@sprite_y(r5)
       jmp  green_gun_handler_0
green_gun_handler_2:
*      Green gun 2 shooting down
       li   r0,24
       a    r0,@sprite_y(r5)
       neg  @sprite_counter(r5)
green_gun_handler_0:
       bl   @rand
       andi r0,>ff
       mov  r0,@sprite_counter(r4)
green_gun_handler_1:
       .endproc
*// green_gun_handler

*********************************************************************
*
* Red bullet 2 handler (y direction)
*
red_bullet_2_handler:
       a  @sprite_counter(r4),@sprite_y(r4)
       rt
*// red_bullet_2_handler

*********************************************************************
*
* Blue plane handler
*
blue_plane_handler:
       mov  @sprite_counter(r4),r0
       mov  @sprite_z(r4),r1
       mov  r1,r2
       a    r0,r1
       jlt  blue_plane_handler_1
       ci   r1,player_z_max
       jhe  blue_plane_handler_1
       mov  r1,@sprite_z(r4)
       jmp  blue_plane_handler_2
blue_plane_handler_1:
       neg  @sprite_counter(r4)
blue_plane_handler_2:
       andi r2,>30
       srl  r2,3
       mov  r0,r0
       jlt  blue_plane_handler_3
       mov  @blue_plane_sprite_types_up(r2),r1
       jmp  blue_plane_handler_4
blue_plane_handler_3:
       mov  @blue_plane_sprite_types_down(r2),r1
blue_plane_handler_4:
       mov  r1,@sprite_type(r4)
       rt
blue_plane_sprite_types_up:
       data sprite_type_blue_plane_up_xs
       data sprite_type_blue_plane_up_s
       data sprite_type_blue_plane_up_m
       data sprite_type_blue_plane_up_l
blue_plane_sprite_types_down:
       data sprite_type_blue_plane_down_xs
       data sprite_type_blue_plane_down_s
       data sprite_type_blue_plane_down_m
       data sprite_type_blue_plane_down_l
*// blue_plane_handler

*********************************************************************
*
* Boss handler
*
boss_handler:
       .proc
       mov  @sprite_counter(r4),r0
       jlt  boss_handler_1
*      Count down to move
       dec  @sprite_counter(r4)
       jne  boss_handler_3
*      Move
       mov  @boss_active,r0
       jgt  boss_handler_6
*      Move forward
       mov  @sprite_x(r4),r0
       ci   r0,boss_start_x-128
       jle  boss_handler_5
       dec  @sprite_x(r4)
boss_handler_5:
       mov  @player_sprite,r5
       mov  @sprite_y(r5),r0
       s    @sprite_y(r4),r0
       jeq  boss_handler_4
       seto r0
       jlt  boss_handler_4
       neg  r0
boss_handler_4:
       a    r0,@sprite_y(r4)
       jmp  boss_handler_2
*      Move backward
boss_handler_6:
       mov  @sprite_x(r4),r0
       ci   r0,boss_start_x
       jh   boss_handler_7
       inc  @sprite_x(r4)
       jmp  boss_handler_2
boss_handler_7:
       clr  @boss_active
       jmp  boss_handler_2
*      Init
boss_handler_1:
       mov  r4,@boss_sprite
       seto @boss_active
       li   r0,sprite_patterns_2_bank_select
       mov  r0,@sprite_patterns_bank_select
       bl   @upload_sprite_patterns
boss_handler_2:
       li   r0,4
       mov  r0,@sprite_counter(r4)
boss_handler_3:
       .endproc
*// boss_handler

*********************************************************************
*
* Boss shadow handler
*
boss_shadow_handler:
       mov  @boss_sprite,r5
       mov  @sprite_x(r5),@sprite_x(r4)
       mov  @sprite_y(r5),@sprite_y(r4)
       rt
*// boss_shadow_handler

*********************************************************************
*
* Boss rocket launcher handler
*
boss_rocket_launcher_handler:
       mov  @boss_sprite,r5
       mov  @sprite_x(r5),@sprite_x(r4)
       mov  @sprite_y(r5),r0
       ai   r0,22
       mov  r0,@sprite_y(r4)
       mov  @sprite_z(r5),r0
       ai   r0,34
       mov  r0,@sprite_z(r4)
       rt
*// boss_rocket_launcher_handler

*********************************************************************
*
* Red rockets handler
*
red_rocket_fire_time:
       equ  140
*
red_rocket_handler:
       .proc
       mov  @sprite_counter(r4),r0
       jlt  red_rocket_handler_4
       inc  r0
       mov  r0,@sprite_counter(r4)
       ci   r0,red_rocket_fire_time
       jlt  red_rocket_handler_3
       jne  red_rocket_handler_1
*      Fire
       li   r0,sprite_type_red_rocket_2
       mov  r0,@sprite_type(r4)
*      After firing
red_rocket_handler_1:
       andi r0,1
       jne  red_rocket_handler_5
       dec  @sprite_x(r4)
*      Move towards player
       mov  @player_sprite,r5
       mov  @sprite_y(r5),r0           ; Player y
       s    @sprite_y(r4),r0           ; Minus rocket y
       jeq  red_rocket_handler_2
       seto r0                         ; Sign -1 - sets no flags
       jlt  red_rocket_handler_2       ; player y - rocket y < 0
       neg  r0                         ; If > 0 change sign to 1
red_rocket_handler_2:
       a    r0,@sprite_y(r4)
       jmp  red_rocket_handler_5
*      Before firing
red_rocket_handler_3:
       mov  @boss_sprite,r5
       mov  @sprite_x(r5),r0
       ai   r0,-4
       mov  r0,@sprite_x(r4)
       mov  @sprite_y(r5),r0
       ai   r0,18
       mov  r0,@sprite_y(r4)
       mov  @sprite_z(r5),r0
       ai   r0,30
       mov  r0,@sprite_z(r4)
       jmp  red_rocket_handler_5
*      Init
red_rocket_handler_4:
       li   r0,6
       mov  r0,@boss_rocket_hits
       clr  @sprite_counter(r4)
red_rocket_handler_5:
       .endproc
*// red_rocket_handler

*********************************************************************
*
* Player explosion center handler
*
player_explosion_center_handler:
       .proc
       mov  @sprite_counter(r4),r0
       jlt  player_explosion_center_handler_1
       inc  r0
       mov  r0,@sprite_counter(r4)
       ci   r0,24
       jne  player_explosion_center_handler_2
       clr  @sprite_type(r4)
       jmp  player_explosion_center_handler_2
*      Init
player_explosion_center_handler_1:
       clr  @sprite_counter(r4)
       clr  r1
       li   r2,6
player_explosion_center_handler_3:
       .push r4
       bl   @allocate_sprite
       mov  r4,r5
       .pop r4
       mov  r5,r5
       jeq  player_explosion_center_handler_2
       li   r0,sprite_type_player_explosion
       mov  r0,@sprite_type(r5)
       mov  r1,@sprite_counter(r5)
       bl   @align_sprites
       inc  r1
       dec  r2
       jne  player_explosion_center_handler_3
player_explosion_center_handler_2:
       .endproc
*// player_explosion_center_handler

*********************************************************************
*
* Player explosion handler
*
player_explosion_handler:
       ab   @byte_01,@sprite_counter(r4)
       mov  @sprite_counter(r4),r0
       cb   r0,@byte_20
       jhe  player_explosion_handler_1
       mov  r0,r1
       srl  r0,2
       andi r0,>0100
       jeq  player_explosion_handler_2
       andi r1,>000f
       sla  r1,3
       ai   r1,player_explosion_velocity_table
       a    *r1+,@sprite_x(r4)
       a    *r1+,@sprite_y(r4)
       a    *r1+,@sprite_z(r4)
       jmp  player_explosion_handler_2
player_explosion_handler_1:
       clr  @sprite_type(r4)
player_explosion_handler_2:
       rt
byte_01:
       byte >01
byte_20:
       byte >20
player_explosion_velocity_table:
       data 1,0,0,0
       data -1,0,0,0
       data 0,1,0,0
       data 0,-1,0,0
       data 0,0,1,0
       data 0,0,-1,0
*// player_explosion_handler

*********************************************************************
*
* Satellite handler
*
satellite_handler:
       dec  @sprite_y(r4)
       rt
*// satellite_handler

*********************************************************************
*
* Hit handler
*
* Shows a hit on an indestructible item
*
hit_handler:
       inc  @sprite_counter(r4)
       mov  @sprite_counter(r4),r0
       ci   r0,16
       jne  hit_handler_1
       clr  @sprite_type(r4)
       jmp  hit_handler_2
hit_handler_1:
       ci   r0,8
       jne  hit_handler_2
       li   r0,sprite_type_hit_1
       mov  r0,@sprite_type(r4)
hit_handler_2:
       rt
*// hit_handler

*********************************************************************
*
* Silo hit handler
*
* r4: bullet sprite
* r5: sprite that's hit
*
* Explode and add fuel
*
silo_hit_handler:
       .proc
       bl   @explode_hit_handler
       mov  @fuel,r0
       ai   r0,2*fuel_unit
       ci   r0,fuel_max
       jle  silo_hit_handler_1
       li   r0,fuel_max
silo_hit_handler_1:
       mov   r0,@fuel
       .endproc
*// silo_hit_handler

*********************************************************************
*
* Explode hit handler
*
* r4: bullet sprite
* r5: sprite that's hit
*
explode_hit_handler:
       clr  @sprite_type(r4)           ; Remove bullet
       li   r0,sprite_type_explosion_1
       mov  r0,@sprite_type(r5)        ; Change sprite that's hit to explosion
       seto @sprite_counter(r5)
       rt
*// explode_hit_handler

*********************************************************************
*
* Small explode hit handler
*
* r4: bullet sprite
* r5: sprite that's hit
*
small_explode_hit_handler:
       clr  @sprite_type(r4)           ; Remove bullet
       li   r0,sprite_type_small_explosion
       mov  r0,@sprite_type(r5)        ; Change sprite that's hit to small explosion
       seto @sprite_counter(r5)
       rt
*// small_explode_hit_handler

*********************************************************************
*
* Wall hit handler
*
* r4: bullet sprite
* r5: wall that's hit
*
wall_hit_handler:
       li   r0,sprite_type_hit_2
       mov  r0,@sprite_type(r4)        ; Change bullet to hit sprite
       seto @sprite_counter(r4)
       rt
*// wall_hit_handler

*********************************************************************
*
* Boss hit handler
*
* r4: bullet sprite
* r5: boss
*
boss_hit_handler:
       li   r0,sprite_type_hit_2
       mov  r0,@sprite_type(r4)        ; Change bullet to hit sprite
       seto @sprite_counter(r4)
       rt
*// boss_hit_handler

*********************************************************************
*
* Red rocket hit handler
*
* r4: bullet sprite
* r5: rocket
*
boss_bonus_200:
       equ  20
boss_bonus_1000:
       equ  100
*
red_rocket_hit_handler:
       .proc
       clr  @sprite_type(r4)
       dec  @boss_rocket_hits
       jne  red_rocket_hit_handler_3
       clr  @sprite_type(r5)
       neg  @boss_active
       mov  @sprite_counter(r5),r0
       ci   r0,red_rocket_fire_time
       jgt  red_rocket_hit_handler_1
       li   r0,boss_bonus_200
       jmp  red_rocket_hit_handler_2
red_rocket_hit_handler_1:
       li   r0,boss_bonus_1000
red_rocket_hit_handler_2:
       mov  r0,@boss_bonus
       bl   @add_score
red_rocket_hit_handler_3:
       .endproc
*// red_rocket_hit_handler
