**
* A handler is called when the sprite is created,
* and each time the sprite is moved.
*
* Parameters for all handlers:
* r4 points to the sprite
* r6 points to the sprite type
*

*********************************************************************
*
* Rocker launch handler
*
rocket_launch_handler:
       .proc
       mov  @sprite_counter(r4),r0
       inc  r0
       mov  r0,@sprite_counter(r4)
       ci   r0,64
       jne  rocket_launch_handler_1
*      Create rocket
       .push r4
       bl   @allocate_sprite
       mov  r4,r5
       .pop r4
       mov  r5,r5
       jeq  rocket_launch_handler_5
       li   r0,sprite_type_green_rocket_1
       mov  r0,@sprite_type(r5)
       bl   @align_sprites
       seto @sprite_counter(r5)
       jmp  rocket_launch_handler_5
rocket_launch_handler_1:
       ci   r0,128
       jne  rocket_launch_handler_2
       clr  @sprite_type(r4)
       jmp  rocket_launch_handler_5
rocket_launch_handler_2:
       andi r0,>0010
       jne  rocket_launch_handler_3
       li   r0,sprite_type_rocket_launch_1
       jmp  rocket_launch_handler_4
rocket_launch_handler_3:
       li   r0,sprite_type_rocket_launch_2
rocket_launch_handler_4:
       mov  r0,@sprite_type(r4)
rocket_launch_handler_5:
       .endproc
*// rocket_launch_handler

*********************************************************************
*
* Green rocket handler
*
green_rocket_handler:
       .proc
       li   r0,->0100
       a    r0,@sprite_y(r4)
       mov  @sprite_counter(r4),r0
       inc  r0
       mov  r0,@sprite_counter(r4)
       andi r0,>0008
       jne  green_rocket_handler_1
       li   r0,sprite_type_green_rocket_1
       jmp  green_rocket_handler_2
green_rocket_handler_1:
       li   r0,sprite_type_green_rocket_2
green_rocket_handler_2:
       mov  r0,@sprite_type(r4)
       .endproc
*// green_rocket_handler

